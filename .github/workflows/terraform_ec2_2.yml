name: "Terraform EC2 Setup (with required resources) & Deployment"

on:
  workflow_dispatch:


jobs:
  setup-iam-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: true

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan (IAM Roles)
        id: terraform-plan-iam
        run: |
          terraform -chdir=terraform plan \
          -target=module.iam.aws_iam_role.ec2_cloudwatch_role \
          -target=module.iam.aws_iam_role_policy.ec2_cloudwatch_policy \
          -target=module.iam.aws_iam_instance_profile.ec2_cloudwatch_profile
      - name: Terraform Apply (IAM Roles)
        id: terraform-apply-iam
        run: |
          terraform -chdir=terraform apply -auto-approve \
          -target=module.iam.aws_iam_role.ec2_cloudwatch_role \
          -target=module.iam.aws_iam_role_policy.ec2_cloudwatch_policy \
          -target=module.iam.aws_iam_instance_profile.ec2_cloudwatch_profile
  setup-vpc:
    needs:
      - setup-iam-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: true

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan (VPC)
        id: terraform-plan-vpc
        run: terraform -chdir=terraform plan -target=module.vpc

      - name: Terraform Apply (VPC)
        id: terraform-apply-vpc
        run: terraform -chdir=terraform apply -auto-approve -target=module.vpc

  setup-vpc-resources:
    needs:
      - setup-vpc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: true

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan (VPC Resources)
        id: terraform-plan-vpc-resources
        run: terraform -chdir=terraform plan -target=module.subnet -target=module.route_table -target=module.igw

      - name: Terraform Apply (VPC Resources)
        id: terraform-apply-vpc-resources
        run: terraform -chdir=terraform apply -auto-approve -target=module.subnet -target=module.route_table -target=module.igw

  setup-security-group:
    needs:
      - setup-vpc-resources
    runs-on: ubuntu-latest
    outputs:
      security_group_id: ${{ steps.get-sg-id.outputs.security_group_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: true

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan (Security Groups)
        id: terraform-plan-sg
        run: terraform -chdir=terraform plan -target=module.sg

      - name: Terraform Apply (Security Groups)
        id: terraform-apply-sg
        run: terraform -chdir=terraform apply -auto-approve -target=module.sg

      - name: Get Security Group ID
        id: get-sg-id
        run: |
          SECURITY_GROUP_ID=$(terraform -chdir=terraform output -raw security_group_id)
          echo "security_group_id=$SECURITY_GROUP_ID" >> $GITHUB_OUTPUT
  setup-and-deploy-ec2-and-alarms:
    runs-on: ubuntu-latest
    needs:
      - setup-security-group
    outputs:
      key_name: ${{ steps.get-key-name.outputs.key_name }}
    env:
      security_group_id: ${{ needs.setup-security-group.outputs.security_group_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate SSH Key Pair
        run: |
          ssh-keygen -t rsa -b 2048 -f ddg-dl-temp -N "" -q
          echo "Claves generadas"
      - name: Set key name
        id: get-key-name
        run: |
          KEY_NAME=temp-key-${{ github.run_id }}
          echo "key_name=$KEY_NAME" >> $GITHUB_ENV
      - name: Import Public Key to AWS
        run: |
          aws ec2 import-key-pair \
            --key-name ${{ steps.get-key-name.outputs.key_name }} \
            --public-key-material "$(base64 -w 0 ddg-dl-temp.pub)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: true

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan (EC2)
        id: terraform-plan-ec2
        run: >
          terraform -chdir=terraform plan
          -var "key_name=${{ env.key_name }}"
          -target=module.ec2
          -target=module.sns.aws_sns_topic.alarm_notifications
          -target=module.sns.aws_sns_topic_subscription.email_subscription
          -target=module.cloudwatch.aws_cloudwatch_metric_alarm.high_cpu_usage
          -target=module.cloudwatch.aws_cloudwatch_metric_alarm.high_network_in
          -target=module.cloudwatch.aws_cloudwatch_metric_alarm.status_check_failed

      - name: Terraform Apply (EC2)
        id: terraform-apply-ec2
        run: >
          terraform -chdir=terraform plan
          -var "key_name=${{ env.key_name }}"
          -target=module.ec2
          -target=module.sns.aws_sns_topic.alarm_notifications
          -target=module.sns.aws_sns_topic_subscription.email_subscription
          -target=module.cloudwatch.aws_cloudwatch_metric_alarm.high_cpu_usage
          -target=module.cloudwatch.aws_cloudwatch_metric_alarm.high_network_in
          -target=module.cloudwatch.aws_cloudwatch_metric_alarm.status_check_failed

      - name: Get EC2 Public IP
        id: get-public-ip
        run: |
          INSTANCE_PUBLIC_IP=$(terraform -chdir=terraform output -raw instance_public_ip)
          echo "instance_public_ip=$INSTANCE_PUBLIC_IP" >> $GITHUB_ENV
      - name: Get EC2 Instance ID
        id: get-instance-id
        run: |
          INSTANCE_ID=$(terraform -chdir=terraform output -raw instance_id)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
      - name: Get Runner IP Address
        id: runner_ip
        uses: haythem/public-ip@v1.3

      - name: Whitelist Runner IP Address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ env.security_group_id }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.runner_ip.outputs.ipv4 }}/32

      - name: Esperar a que la instancia EC2 esté disponible
        run: |
          aws ec2 wait instance-status-ok --instance-ids ${{ env.instance_id }}
          echo "La instancia EC2 está lista."
      - name: Instalar rsync
        run: sudo apt-get install -y rsync

      - name: Transferir archivos a EC2 excluyendo la carpeta 'public'
        run: |
          rsync -avz \
            --exclude 'public' \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '.gitignore' \
            --exclude 'terraform' \
            --exclude 'ddg-dl-temp' \
            --exclude 'ddg-dl-temp.pub' \
            -e "ssh -i ddg-dl-temp -o StrictHostKeyChecking=no" ./ ec2-user@${{ env.instance_public_ip }}:/home/ec2-user/app/
      - name: Desplegar aplicación en EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ddg-dl-temp ec2-user@${{ env.instance_public_ip }} << 'EOF'
            sudo yum update -y
            sudo yum install -y nodejs
            sudo npm install -g pm2
            cd /home/ec2-user/app
            npm install
            pm2 start index.js
            pm2 save
            pm2 startup
            echo "Aplicación desplegada"
          EOF

      - name: Verificar que la API está activa
        continue-on-error: true
        run: |
          curl -I http://${{ env.instance_public_ip }}:3000/api
      - name: Eliminar claves SSH temporales
        run: |
          rm -f ddg-dl-temp ddg-dl-temp.pub

  dispatch-ecr-workflow:
    needs:
      - create-cloudwatch-alarms
    runs-on: ubuntu-latest
    steps:
      - name: Trigger EC2 Workflow
        uses: pauldraper/workflow-dispatch@v1.6
        with:
          workflow: terraform_ecr.yml