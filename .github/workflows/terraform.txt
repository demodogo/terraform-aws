name: Terraform Infra (AWS Resources)

on:
  push:
    branches:
      - test
jobs:
  setup-infra:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Runner IP Address
        id: runner_ip
        uses: haythem/public-ip@v1.3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate SSH Key Pair
        run: |
          ssh-keygen -t rsa -b 2048 -f ddg-dl-temp -N "" -q
          echo "Claves generadas"

      - name: Set key name in environment
        run: |
          echo "KEY_NAME=temp-key-${{ github.run_id }}" >> $GITHUB_ENV

      - name: Import Public Key to AWS
        run: |
          aws ec2 import-key-pair \
            --key-name ${{ env.KEY_NAME }} \
            --public-key-material "$(base64 -w 0 ddg-dl-temp.pub)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan
        run: terraform -chdir=terraform plan -var="key_name=${{ env.KEY_NAME }}"

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve -var="key_name=${{ env.KEY_NAME }}"

      - name: Obtener id del Security Group
        run: |
          cd terraform
          SECURITY_GROUP_ID=$(terraform output -raw security_group_id | tr -d '\n' | tr -d '\r')
          echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV

      - name: Obtener la dirección IP pública de EC2
        run: |
          cd terraform
          PUBLIC_IP=$(terraform output -raw public_ip | tr -d '\n' | tr -d '\r')
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Whitelist Runner IP Address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ env.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.runner_ip.outputs.ipv4 }}/32

      - name: Esperar a que la instancia EC2 esté disponible
        run: |
          aws ec2 wait instance-status-ok --instance-ids ${{ env.INSTANCE_ID }}
          echo "La instancia EC2 está lista."

      - name: Instalar rsync
        run: sudo apt-get install -y rsync

      - name: Transferir archivos a EC2 excluyendo la carpeta 'public'
        run: |
          rsync -avz \
            --exclude 'public' \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '.gitignore' \
            --exclude 'terraform' \
            --exclude 'ddg-dl-temp' \
            --exclude 'ddg-dl-temp.pub' \
            -e "ssh -i ddg-dl-temp -o StrictHostKeyChecking=no" ./ ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/app/

      - name: Desplegar aplicación en EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ddg-dl-temp ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
            sudo yum update -y
            sudo yum install -y nodejs
            sudo npm install -g pm2
            cd /home/ec2-user/app
            npm install
            pm2 start index.js
            pm2 save
            pm2 startup
            echo "Aplicación desplegada"
          EOF

      - name: Verificar que la API está activa
        run: |
          curl -I http://${{ env.PUBLIC_IP }}:3000/api

      - name: Eliminar claves SSH temporales
        run: |
          rm -f ddg-dl-temp ddg-dl-temp.pub

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

      - name: Build/Tag Docker Image
        run: |
          docker build -t dl-web-app:latest .
          docker tag dl-web-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/dl-web-app-ecr:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/dl-web-app-ecr:latest

      - name: Revoke Runner IP Address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.runner_ip.outputs.ipv4 }}/32